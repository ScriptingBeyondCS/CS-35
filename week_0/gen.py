import os
import os.path
import random
import recipe_generator
import subprocess
# import sys

num_dirs = 0
# ln -s
def dir_generator(n, depth, max_recipes=0,  dirtype_string=""):
        """ Takes as input an int n, an int depth, and a string
            dirtype_string, then randomly generates a tree of
            n directories, with max depth depth.  Each of these
            files will be named corresponding to dirtype_string.
        """
        ### Get global tallies
        global num_dirs  # So that we don't have to pass current dirs whenever we call
        global max_dirs  # Max dir number
        global max_depth # Don't want files nested deeper than this
        global dir_list  # Write out dir paths as we make them

        ### Base cases
        if num_dirs>max_dirs or depth > max_depth or n==0:
                # print(num_dirs>max_dirs, depth>max_depth, n==0, os.getcwd())
                if max_recipes>0:
                        num_recipes = random.choice(list(range(1,max_recipes)))
                        recipe_generator.generate_recipes(num_recipes)
                return

        if max_recipes>0:
                num_recipes = random.choice(list(range(1,max_recipes)))
                recipe_generator.generate_recipes(num_recipes)


        ### Main function body
        # How many subdirectories do we want to make here?
        num_children = random.choice([3,4,5,6,7])

        ## Distribute the n directories between each of the subdirectories
        # pick some random numbers on the interval
        partition_pts = sorted([random.randrange(n) for i in range(num_children)])
        # take the differences between them --> [1,2,3,5] --> [1,1,1,2]
        # tells us the "size" of each part of our partition.
        n_values = [partition_pts[0]] + [partition_pts[i] - partition_pts[i-1] for i in range(1,num_children)]
        ## Loop through all of the children
        children = 0 # number of children we've called the function on so far
        while children < num_children and num_dirs<max_dirs:
                dir_name = dirtype_string + str(num_dirs)# name the dir accordingly
                os.makedirs(str(dir_name))              # make child dir
                os.chdir(str(dir_name))                 # move into it
                dir_list.append(os.getcwd())            # store the dir_name in the list for interlacing
                num_dirs += 1                           # account for this change
                next_n = n_values[children]             # find how many subdirs the child gets
                dir_generator(next_n, depth+1, max_recipes = max_recipes)          # recurse!
                children += 1                           # called the function on one more child
                os.chdir('..')                          # move back to parent dir

def sym_linker(n):
        """ sym_linker takes as input an int n, and then goes through
            the global tree directory generated by dir_generator, and
            inserts symlinks between random files.
        """
        for i in range(n):
                global dir_list
                dir_1 = random.choice(dir_list)
                dir_2 = random.choice(dir_list)
                command = "ln -s " + str(dir_1) + " " + str(dir_2)
                os.system(command)

def sym_link_all():
        """ sym_link_all takes no inputs, and iterates through the
            global tree directory generated by dir_generator, and
            symlinks to another directory in the tree.
        """
        global dir_list
        for dir_1 in dir_list:
                dir_2 = random.choice(dir_list)
                try:
                        command = "ln -s " + str(dir_1) + " " + str(dir_2)
                        subprocess.call(command)
                except:
                        pass

def recipe_dirs_generator(n,k, recipe_num=0):
        """ main_generator takes as input an int, n
            and another int, k.  n determines the total
            number of max nested subdirectories we will
            have, and k determines the max number of
            symlinks connecting our tree in the end
        """
        ## Global vars
        # To return to once done (just in case)
        global original_dir
        original_dir = os.getcwd()

        # Set a global tally of the number of dirs we've made so far
        global num_dirs
        num_dirs = 0

        # Set a global limit on the global tally!
        global max_dirs
        max_dirs = n

        # Maximum number of layers for file tree
        global max_depth
        max_depth = 7

        global dir_list
        dir_list = []

        ##
        # Make a tree directory to not clutter workspace
        try:    # try making tree dir
                os.makedirs("recipes")
        except: # unless it exists already, in which case
                os.system("rm -rf recipes/") # delete it
                os.makedirs("recipes")       # and make a new one
        os.chdir("recipes")
        # Create n subdirectories
        dir_generator(n, 0, max_recipes=recipe_num)
        # Return to where we started
        os.chdir(original_dir)
        sym_linker(k)
        try:
                subprocess.call("tree -a")
        except OSError:
                print(("If you're on OSX, then there is a piece of software that allows you to visualize "
                       "the directories we've constructed as a tree.  I have made a small script thing that "
                       "(should) install tree (if you don't have it) using homebrew (which the script will "
                       "also install, if you don't have that already).  That being said, you are right to "
                       "be suspicious of a script claiming to install something beneficial to your machine. "
                       "google 'install homebrew' and use $ brew install tree if you would like to do it "
                       "yourself.  \n\n Run install script? [y]/n"))
                if input().lower() == 'y':
                        print("Ok.  Installing...`")
                        try:
                                subprocess.call("tree -a")
                        except OSError:
                                try:
                                        subprocess.call("brew install tree")
                                        subprocess.call("tree -a")
                                except OSError:
                                        try:
                                                os.system("/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com"
                                                  "/Homebrew/install/master/install)\"")
                                                os.system("brew install tree")
                                                os.system("tree -a")
                                        except:
                                                print("hmmm... Didn't work!  Are you on Windows, by any chance?")
                                                pass
                else:
                        print("Ok.  Enjoy the assignment!")
def main():
        """ main takes no arguments
        """
        try:
                subprocess.call("mkdir kidnapped_grutor")
        except OSError:
                os.system("rm -rf kidnapped_grutor/")
                os.makedirs("kidnapped_grutor")
        #### Make grutor's hard drive directory
        os.chdir("kidnapped_grutor")

        ### Make computer directories
        ##
        os.makedirs("Applications")
        ##
        os.makedirs("Music")
        ##
        os.makedirs("Movies")


        ##
        os.makedirs("Desktop")
        os.chdir("Desktop")
        #
        recipe_dirs_generator(1000, 0, recipe_num = 5)
        #
        os.makedirs("Desktop_1")
        os.chdir("Desktop_1")
        os.makedirs("Screenshots")
        os.makedirs("More screenshots")
        os.makedirs("stuff")
        os.makedirs("fklasdfjewa")
        os.chdir("..")
        #
        os.makedirs("Desktop_2016")
        os.chdir("Desktop_2016")
        os.makedirs("Research")
        os.makedirs("blah")
        os.makedirs("thingys")
        os.makedirs("Desktop cleaning purge")
        os.chdir("..")
        #
        os.makedirs("Screenshots")
        os.chdir("..")

        os.makedirs("Documents")
        os.makedirs("Pictures")
        os.makedirs("Downloads")
main()
